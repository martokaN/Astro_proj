---
const base = import.meta.env.SITE || 'http://localhost:4321';
const response = await fetch(`${base}/api/google`);
const { reviews = [], error } = await response.json();
---

<div class="reviews-section py-16 bg-[#F6E2CA] rounded-xl">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold text-center text-[#DAAB6F] mb-10">What Our Customers Say</h2>

    <div class="relative">
      <div id="reviewsCarousel" class="overflow-hidden">
        <div id="reviewsSlider" class="flex transition-transform duration-500 ease-in-out will-change-transform">
          {reviews.map((review) => (
            <div class="review-card min-w-full md:min-w-[33.333%] p-4 box-border">
              <div class="bg-[#FFFFFF] p-6 rounded-2xl shadow-lg border border-[#4B3001] h-full flex flex-col">
                <div class="flex items-center mb-4">
                  {review.profileImage ? (
                    <img src={review.profileImage} alt={review.author} class="w-12 h-12 rounded-full mr-4 border border-[#4B3001]" />
                  ) : (
                    <div class="w-12 h-12 rounded-full bg-[#DFB67D] flex items-center justify-center text-[#FFFFFF] font-bold mr-4">
                      {review.author?.charAt(0) || 'U'}

                    </div>
                  )}
                  <div>
                    <h4 class="font-semibold text-[#432602]">{review.author}</h4>
                    <div class="flex">
                      {Array.from({ length: 5 }).map((_, i) => (
                        <svg 
                          xmlns="http://www.w3.org/2000/svg" 
                          class={`h-4 w-4 ${i < review.rating ? 'text-[#DFB67D]' : 'text-gray-300'}`}
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                      ))}
                    </div>
                  </div>
                </div>
                <p class="text-[#432602] flex-grow">{review.text.text}</p>
                <p class="text-sm text-gray-500 mt-4">
                  {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'long', day: 'numeric' }).format(new Date(review.publishTime))}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation Buttons -->
      <button 
        id="prevButton" 
        class="absolute top-1/2 left-2 -translate-y-1/2 bg-[#DFB67D] hover:bg-[#CA9862] text-[#FFFFFF] rounded-full p-2 focus:outline-none shadow-md z-10"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button 
        id="nextButton" 
        class="absolute top-1/2 right-2 -translate-y-1/2 bg-[#DFB67D] hover:bg-[#CA9862] text-[#FFFFFF] rounded-full p-2 focus:outline-none shadow-md z-10"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Indicator Dots -->
      <div class="flex justify-center mt-6">
        {reviews.map((_, index) => (
          <button 
            class="indicator-dot mx-1 h-3 w-3 rounded-full bg-[#DFB67D] opacity-50 transition-opacity duration-300"
            data-index={index}
            aria-label={`Go to review ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const slider = document.getElementById('reviewsSlider');
    const reviewCards = document.querySelectorAll('.review-card');
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    const indicators = document.querySelectorAll('.indicator-dot');

    let currentIndex = 0;
    let slidesToShow = 1;
    let autoSlideInterval;

    function getCardWidth() {
      return reviewCards[0].offsetWidth;
    }

    function updateSlidesToShow() {
      slidesToShow = window.innerWidth >= 768 ? 3 : 1;
      updateSliderPosition();
    }

    function updateSliderPosition() {
      const cardWidth = getCardWidth();
      slider.style.transform = `translateX(-${currentIndex * cardWidth}px)`;

      indicators.forEach((dot, i) => {
        dot.classList.toggle('opacity-100', i === currentIndex);
        dot.classList.toggle('opacity-50', i !== currentIndex);
      });
    }

    function goToSlide(index) {
      const maxIndex = reviewCards.length - slidesToShow;
      if (index < 0) index = maxIndex;
      if (index > maxIndex) index = 0;

      currentIndex = index;
      updateSliderPosition();
    }

    prevButton.addEventListener('click', () => goToSlide(currentIndex - 1));
    nextButton.addEventListener('click', () => goToSlide(currentIndex + 1));
    indicators.forEach((dot, i) => {
      dot.addEventListener('click', () => goToSlide(i));
    });

    function startAutoSlide() {
      autoSlideInterval = setInterval(() => goToSlide(currentIndex + 1), 5000);
    }

    function stopAutoSlide() {
      clearInterval(autoSlideInterval);
    }

    const carouselContainer = document.getElementById('reviewsCarousel');
    carouselContainer.addEventListener('mouseenter', stopAutoSlide);
    carouselContainer.addEventListener('mouseleave', startAutoSlide);

    window.addEventListener('resize', updateSlidesToShow);

    // Init
    updateSlidesToShow();
    goToSlide(0);
    startAutoSlide();
  });
</script>
