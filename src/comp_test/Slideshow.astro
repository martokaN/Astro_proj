---
// Slideshow.astro
import { Image } from 'astro:assets';

// You can import your images directly in this file
// Example:
// import slide1 from '../assets/images/slide1.jpg';
// import slide2 from '../assets/images/slide2.jpg';
// import slide3 from '../assets/images/slide3.jpg';
import slide1 from '../../public/images/slideshow/image1.jpg';
import slide2 from '../../public/images/slideshow/image2.jpg';
import slide3 from '../../public/images/slideshow/image3.jpg';

// Or you can pass them as props from the parent component
interface Props {
  images?: {
    src: ImageMetadata | string;
    alt: string;
  }[];
  interval?: number;
  height?: string;
}

// Define default images if none are provided
// You should replace these with your actual image imports
const defaultImages = [
  // If you're using this component directly, uncomment and use these:
  // { src: slide1, alt: "Slide 1" },
  // { src: slide2, alt: "Slide 2" },
  // { src: slide3, alt: "Slide 3" },
  
  // Placeholder for demonstration
  { src: slide1, alt: 'Slide 1' },
  { src: slide2, alt: 'Slide 2' },
  { src: slide3, alt: 'Slide 3' },
];

const { 
  images = defaultImages, 
  interval = 5000, 
  height = "h-96" 
} = Astro.props;

// Determine if we're using the Image component or regular img tags
// Image component requires ImageMetadata objects (imported images)
const useImageComponent = images.every(img => 
  typeof img.src === 'object' && img.src !== null && 'src' in img.src
);
---

<div class="slideshow-container relative w-full {height} overflow-hidden rounded-lg shadow-lg">
  <!-- Slides -->
  {images.map((image, index) => (
    <div class={`slide absolute inset-0 w-full h-full transition-opacity duration-1000 ease-in-out ${index === 0 ? 'opacity-100' : 'opacity-0'}`}>
      {useImageComponent ? (
        <Image 
          src={image.src} 
          alt={image.alt} 
          width={800}
          height={600}
          class="w-full h-full object-cover" 
        />
      ) : (
        <img 
          src={image.src.toString()} 
          alt={image.alt} 
          class="w-full h-full object-cover" 
        />
      )}
    </div>
  ))}
  
  <!-- Radio buttons container -->
  <div class="absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
    {images.map((_, index) => (
      <button data-index={index} class={`radio-button w-3 h-3 rounded-full transition-colors duration-300 hover:bg-white ${index === 0 ? 'bg-white' : 'bg-gray-400'}`}></button>
    ))}
  </div>
</div>

<script define:vars={{ interval }}>
  // Client-side script executed after hydration
  const slides = document.querySelectorAll('.slide');
  const radioButtons = document.querySelectorAll('.radio-button');
  let currentSlide = 0;
  const slideCount = slides.length;
  const autoSlideInterval = interval;
  let slideInterval;

  function showSlide(index) {
    slides.forEach(slide => {
      slide.classList.add('opacity-0');
      slide.classList.remove('opacity-100');
    });
    
    slides[index].classList.add('opacity-100');
    slides[index].classList.remove('opacity-0');
    
    radioButtons.forEach((button, i) => {
      if (i === index) {
        button.classList.add('bg-white');
        button.classList.remove('bg-gray-400');
      } else {
        button.classList.add('bg-gray-400');
        button.classList.remove('bg-white');
      }
    });
    
    currentSlide = index;
  }

  function startSlideshow() {
    slideInterval = setInterval(() => {
      let nextSlide = (currentSlide + 1) % slideCount;
      showSlide(nextSlide);
    }, autoSlideInterval);
  }
  
  function stopSlideshow() {
    clearInterval(slideInterval);
  }
  
  radioButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const index = parseInt(button.getAttribute('data-index'));
      showSlide(index);
      stopSlideshow();
      startSlideshow();
    });
  });
  
  startSlideshow();
  
  const slideshow = document.querySelector('.slideshow-container');
  slideshow.addEventListener('mouseenter', stopSlideshow);
  slideshow.addEventListener('mouseleave', startSlideshow);
</script>